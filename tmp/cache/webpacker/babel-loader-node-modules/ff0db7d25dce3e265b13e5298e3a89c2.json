{"ast":null,"code":"\"use strict\"; // eslint-disable-next-line func-names\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nmodule.exports = function () {\n  if ((typeof globalThis === \"undefined\" ? \"undefined\" : _typeof(globalThis)) === 'object') {\n    return globalThis;\n  }\n\n  var g;\n\n  try {\n    // This works if eval is allowed (see CSP)\n    // eslint-disable-next-line no-new-func\n    g = this || new Function('return this')();\n  } catch (e) {\n    // This works if the window reference is available\n    if ((typeof window === \"undefined\" ? \"undefined\" : _typeof(window)) === 'object') {\n      return window;\n    } // This works if the self reference is available\n\n\n    if ((typeof self === \"undefined\" ? \"undefined\" : _typeof(self)) === 'object') {\n      return self;\n    } // This works if the global reference is available\n\n\n    if (typeof global !== 'undefined') {\n      return global;\n    }\n  }\n\n  return g;\n}();","map":null,"metadata":{},"sourceType":"module"}