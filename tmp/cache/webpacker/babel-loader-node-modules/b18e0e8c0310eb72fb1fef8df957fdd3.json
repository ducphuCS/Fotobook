{"ast":null,"code":"/**\r\n * node-crc32-stream\r\n *\r\n * Copyright (c) 2014 Chris Talkington, contributors.\r\n * Licensed under the MIT license.\r\n * https://github.com/archiverjs/node-crc32-stream/blob/master/LICENSE-MIT\r\n */\n'use strict';\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nvar _require = require('readable-stream'),\n    Transform = _require.Transform;\n\nvar _require2 = require('crc'),\n    crc32 = _require2.crc32;\n\nvar CRC32Stream = /*#__PURE__*/function (_Transform) {\n  _inherits(CRC32Stream, _Transform);\n\n  var _super = _createSuper(CRC32Stream);\n\n  function CRC32Stream(options) {\n    var _this;\n\n    _classCallCheck(this, CRC32Stream);\n\n    _this = _super.call(this, options);\n    _this.checksum = Buffer.allocUnsafe(4);\n\n    _this.checksum.writeInt32BE(0, 0);\n\n    _this.rawSize = 0;\n    return _this;\n  }\n\n  _createClass(CRC32Stream, [{\n    key: \"_transform\",\n    value: function _transform(chunk, encoding, callback) {\n      if (chunk) {\n        this.checksum = crc32(chunk, this.checksum);\n        this.rawSize += chunk.length;\n      }\n\n      callback(null, chunk);\n    }\n  }, {\n    key: \"digest\",\n    value: function digest(encoding) {\n      var checksum = Buffer.allocUnsafe(4);\n      checksum.writeUInt32BE(this.checksum >>> 0, 0);\n      return encoding ? checksum.toString(encoding) : checksum;\n    }\n  }, {\n    key: \"hex\",\n    value: function hex() {\n      return this.digest('hex').toUpperCase();\n    }\n  }, {\n    key: \"size\",\n    value: function size() {\n      return this.rawSize;\n    }\n  }]);\n\n  return CRC32Stream;\n}(Transform);\n\nmodule.exports = CRC32Stream;","map":null,"metadata":{},"sourceType":"module"}